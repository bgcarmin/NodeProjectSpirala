let assert = chai.assert;

describe('dajTacnost()', function() {
    it('treba vratiti 100% tacnost, sa praznom listom greski', function() {
        var objekat = TestoviParser.dajTacnost("{\"stats\":{\"suites\":2,\"tests\":2,\"passes\":2,\"pending\":0,\"failures\":0,\"start\":\"2021-11-05T15:00:26.343Z\",\"end\":\"2021-11-05T15:00:26.352Z\",\"duration\":9},\"tests\":[{\"title\":\"should draw 3 rows when parameter are 2,3\",\"fullTitle\":\"Tabela crtaj() should draw 3 rows when parameter are 2,3\",\"file\":null,\"duration\":1,\"currentRetry\":0,\"speed\":\"fast\",\"err\":{}},{\"title\":\"should draw 2 columns in row 2 when parameter are 2,3\",\"fullTitle\":\"Tabela crtaj() should draw 2 columns in row 2 when parameter are 2,3\",\"file\":null,\"duration\":0,\"currentRetry\":0,\"speed\":\"fast\",\"err\":{}}],\"pending\":[],\"failures\":[],\"passes\":[{\"title\":\"should draw 3 rows when parameter are 2,3\",\"fullTitle\":\"Tabela crtaj() should draw 3 rows when parameter are 2,3\",\"file\":null,\"duration\":1,\"currentRetry\":0,\"speed\":\"fast\",\"err\":{}},{\"title\":\"should draw 2 columns in row 2 when parameter are 2,3\",\"fullTitle\":\"Tabela crtaj() should draw 2 columns in row 2 when parameter are 2,3\",\"file\":null,\"duration\":0,\"currentRetry\":0,\"speed\":\"fast\",\"err\":{}}]}");
        var jsonRezultat = JSON.stringify(objekat);
        assert.equal(jsonRezultat,'{"tacnost":"100%","greske":[]}',"dajTacnost () treba vratiti 100% tacnost, sa praznom listom greski");
      });
    it('treba vratiti 0% tacnost, sa dva elementa u listi greski', function() {
      var objekat = TestoviParser.dajTacnost("{\n  \"stats\": {\n\t\"suites\": 2,\n\t\"tests\": 2,\n\t\"passes\": 0,\n\t\"pending\": 0,\n\t\"failures\": 2,\n\t\"start\": \"2021-11-05T15:00:26.343Z\",\n\t\"end\": \"2021-11-05T15:00:26.352Z\",\n\t\"duration\": 9\n  },\n  \"tests\": [\n\t{\n  \t\"title\": \"should draw 3 rows when parameter are 2,3\",\n  \t\"fullTitle\": \"Tabela crtaj() should draw 3 rows when parameter are 2,3\",\n  \t\"file\": null,\n  \t\"duration\": 1,\n  \t\"currentRetry\": 0,\n  \t\"speed\": \"fast\",\n  \t\"err\": {}\n\t},\n\t{\n  \t\"title\": \"should draw 2 columns in row 2 when parameter are 2,3\",\n  \t\"fullTitle\": \"Tabela crtaj() should draw 2 columns in row 2 when parameter are 2,3\",\n  \t\"file\": null,\n  \t\"duration\": 0,\n  \t\"currentRetry\": 0,\n  \t\"speed\": \"fast\",\n    \"err\": {}\n  }\n  ],\n  \"pending\": [],\n  \"failures\": [\n  {\n    \"title\": \"should draw 3 rows when parameter are 2,3\",\n    \"fullTitle\": \"Tabela crtaj() should draw 3 rows when parameter are 2,3\",\n    \"file\": null,\n    \"duration\": 1,\n    \"currentRetry\": 0,\n    \"speed\": \"fast\",\n    \"err\": {}\n  },\n  {\n    \"title\": \"should draw 2 columns in row 2 when parameter are 2,3\",\n    \"fullTitle\": \"Tabela crtaj() should draw 2 columns in row 2 when parameter are 2,3\",\n    \"file\": null,\n    \"duration\": 0,\n    \"currentRetry\": 0,\n    \"speed\": \"fast\",\n    \"err\": {}\n  }\n  ],\n  \"passes\": []\n}");
      var jsonRezultat = JSON.stringify(objekat);
      assert.equal(jsonRezultat,'{"tacnost":"0%","greske":["Tabela crtaj() should draw 3 rows when parameter are 2,3","Tabela crtaj() should draw 2 columns in row 2 when parameter are 2,3"]}',"dajTacnost () treba vratiti 0% tacnost, sa dva elementa u listi greski");
    });
    it('treba vratiti 50% tacnost, sa jednim elementom u listi greski', function() {
      var objekat = TestoviParser.dajTacnost("{\n  \"stats\": {\n\t\"suites\": 2,\n\t\"tests\": 2,\n\t\"passes\": 1,\n\t\"pending\": 0,\n\t\"failures\": 1,\n\t\"start\": \"2021-11-05T15:00:26.343Z\",\n\t\"end\": \"2021-11-05T15:00:26.352Z\",\n\t\"duration\": 9\n  },\n  \"tests\": [\n\t{\n  \t\"title\": \"should draw 3 rows when parameter are 2,3\",\n  \t\"fullTitle\": \"Tabela crtaj() should draw 3 rows when parameter are 2,3\",\n  \t\"file\": null,\n  \t\"duration\": 1,\n  \t\"currentRetry\": 0,\n  \t\"speed\": \"fast\",\n  \t\"err\": {}\n\t},\n\t{\n  \t\"title\": \"should draw 2 columns in row 2 when parameter are 2,3\",\n  \t\"fullTitle\": \"Tabela crtaj() should draw 2 columns in row 2 when parameter are 2,3\",\n  \t\"file\": null,\n  \t\"duration\": 0,\n  \t\"currentRetry\": 0,\n  \t\"speed\": \"fast\",\n    \"err\": {}\n  }\n  ],\n  \"pending\": [],\n  \"failures\": [\n  {\n    \"title\": \"should draw 2 columns in row 2 when parameter are 2,3\",\n    \"fullTitle\": \"Tabela crtaj() should draw 2 columns in row 2 when parameter are 2,3\",\n    \"file\": null,\n    \"duration\": 0,\n    \"currentRetry\": 0,\n    \"speed\": \"fast\",\n    \"err\": {}\n  }],\n  \"passes\": [\n  {\n    \"title\": \"should draw 3 rows when parameter are 2,3\",\n    \"fullTitle\": \"Tabela crtaj() should draw 3 rows when parameter are 2,3\",\n    \"file\": null,\n    \"duration\": 1,\n    \"currentRetry\": 0,\n    \"speed\": \"fast\",\n    \"err\": {}\n  }]\n}");
      var jsonRezultat = JSON.stringify(objekat);
      assert.equal(jsonRezultat,'{"tacnost":"50%","greske":["Tabela crtaj() should draw 2 columns in row 2 when parameter are 2,3"]}',"dajTacnost () treba vratiti 50% tacnost, sa jednim elementom u listi greski");
    });
    it('treba vratiti 75% tacnost, sa jednim elementom u listi greski', function() {
      var objekat = TestoviParser.dajTacnost("{\n  \"stats\": {\n\t\"suites\": 2,\n\t\"tests\": 4,\n\t\"passes\": 3,\n\t\"pending\": 0,\n\t\"failures\": 1,\n\t\"start\": \"2021-11-05T15:00:26.343Z\",\n\t\"end\": \"2021-11-05T15:00:26.352Z\",\n\t\"duration\": 9\n  },\n  \"tests\": [\n\t{\n  \t\"title\": \"test broj 1 koji je tacan\",\n  \t\"fullTitle\": \"dajTacnost() treba vidjeti test 1 kao tacan\",\n  \t\"file\": null,\n  \t\"duration\": 1,\n  \t\"currentRetry\": 0,\n  \t\"speed\": \"fast\",\n  \t\"err\": {}\n\t},\n\t{\n  \t\"title\": \"test broj 2 koji je tacan\",\n  \t\"fullTitle\": \"dajTacnost() treba vidjeti test 2 kao tacan\",\n  \t\"file\": null,\n  \t\"duration\": 0,\n  \t\"currentRetry\": 0,\n  \t\"speed\": \"fast\",\n    \"err\": {}\n  },\n  {\n    \"title\": \"test broj 3 koji je tacan\",\n    \"fullTitle\": \"dajTacnost() treba vidjeti test 3 kao tacan\",\n    \"file\": null,\n    \"duration\": 1,\n    \"currentRetry\": 0,\n    \"speed\": \"fast\",\n    \"err\": {}\n  },\n  {\n    \"title\": \"test broj 4 koji je netacan\",\n    \"fullTitle\": \"dajTacnost() treba vidjeti test 4 kao netacan\",\n    \"file\": null,\n    \"duration\": 1,\n    \"currentRetry\": 0,\n    \"speed\": \"fast\",\n    \"err\": {}\n  }\n  ],\n  \"pending\": [],\n  \"failures\": [\n  {\n    \"title\": \"test broj 4 koji je netacan\",\n    \"fullTitle\": \"dajTacnost() treba vidjeti test 4 kao netacan\",\n    \"file\": null,\n    \"duration\": 1,\n    \"currentRetry\": 0,\n    \"speed\": \"fast\",\n    \"err\": {}\n  }],\n  \"passes\": [\n  {\n    \"title\": \"test broj 1 koji je tacan\",\n    \"fullTitle\": \"dajTacnost() treba vidjeti test 1 kao tacan\",\n    \"file\": null,\n    \"duration\": 1,\n    \"currentRetry\": 0,\n    \"speed\": \"fast\",\n    \"err\": {}\n  },\n  {\n    \"title\": \"test broj 2 koji je tacan\",\n    \"fullTitle\": \"dajTacnost() treba vidjeti test 2 kao tacan\",\n    \"file\": null,\n    \"duration\": 0,\n    \"currentRetry\": 0,\n    \"speed\": \"fast\",\n    \"err\": {}\n  },\n  {\n    \"title\": \"test broj 3 koji je tacan\",\n    \"fullTitle\": \"dajTacnost() treba vidjeti test 3 kao tacan\",\n    \"file\": null,\n    \"duration\": 1,\n    \"currentRetry\": 0,\n    \"speed\": \"fast\",\n    \"err\": {}\n  }]\n}");
      var jsonRezultat = JSON.stringify(objekat);
      assert.equal(jsonRezultat,'{"tacnost":"75%","greske":["dajTacnost() treba vidjeti test 4 kao netacan"]}',"dajTacnost () treba vratiti 75% tacnost, sa jednim elementom u listi greski");
    });
    it('treba vratiti 0% tacnost jer sadrzi neispravan JSON format', function() {
      var objekat = TestoviParser.dajTacnost("Ovo nije JSON");
      var jsonRezultat = JSON.stringify(objekat);
      assert.equal(jsonRezultat,'{"tacnost":"0%","greske":["Testovi se ne mogu izvršiti"]}',"dajTacnost () treba vratiti 0% tacnost jer sadrzi neispravan JSON format");
    });
    it('treba vratiti 0% tacnost jer ne sadrzi sve kljuceve', function() {
      var objekat = TestoviParser.dajTacnost("{\n  \"stats\": {}\n}");
      var jsonRezultat = JSON.stringify(objekat);
      assert.equal(jsonRezultat,'{"tacnost":"0%","greske":["Testovi se ne mogu izvršiti"]}',"dajTacnost () treba vratiti 0% tacnost jer ne sadrzi sve kljuceve");
    });
      
   
});